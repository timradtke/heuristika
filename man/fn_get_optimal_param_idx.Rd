% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tulip.R
\name{fn_get_optimal_param_idx}
\alias{fn_get_optimal_param_idx}
\title{Get the index of parameters that optimize the log joint distribution}
\usage{
fn_get_optimal_param_idx(log_joint, idx_wrap)
}
\arguments{
\item{log_joint}{A vector of length \code{dim(param_grid)[1]} multiplied by the
number of evaluated \code{family}s}

\item{idx_wrap}{The number of params (same for each \code{family}); used to
indicate at which index the \code{log_joint} repeats the parameters
for the next \code{family}}
}
\value{
A list of two scalar integers, named \code{raw} and \code{wrapped}
}
\description{
Since we allow multiple \code{family}s to be evaluated at once with the same
grid of parameter values, we first need to identify the 'raw' index that
tells us the optimal \code{family} choice. Then we can within this family identify
the 'wrapped' optimum index that gives the optimal \code{params} choice.
}
\details{
When only a single \code{family} is evaluated, the 'raw' and 'wrapped' indices are
the same.
}
\examples{
# let's say there are 5 parameter sets being evaluated
log_joint_params <- rnorm(n = 5, sd = 5)
idx_wrap <- length(log_joint_params)

# we evaluate the parameter sets for three different family choices, which
# creates 3 * 5 different sets of models to be evaluated
log_joint <- c(
  log_joint_params + rnorm(n = 1, sd = 5),
  log_joint_params + rnorm(n = 1, sd = 5),
  log_joint_params + rnorm(n = 1, sd = 5)
)

ls_opt_idx <- tulip:::fn_get_optimal_param_idx(
  log_joint = log_joint,
  idx_wrap = idx_wrap
)

plot(x = 1:idx_wrap,
     y = seq(-30, 30, length.out = idx_wrap),
     type = "n", xlab = "idx", ylab = "log joint")

for (i in 1:(length(log_joint) / idx_wrap)) {
  lines(
    x = 1:idx_wrap,
    y = log_joint[(i*idx_wrap - 4):(i*idx_wrap)],
    lty = i
  )
}

points(ls_opt_idx$wrapped, log_joint[ls_opt_idx$raw], pch = 19)

}
\keyword{internal}
